            *********** DSU and Union find ************

Functionality -> 
    1. Union(a,b) : Union of two sets where a and b are elements of the set.
    2. Find(a) : Find the set to which a belongs.
    3. Connected(a,b) : Check if a and b belong to the same set.

!! Ideas:
    1. Make Graph of all the elements and then find the connected components etc. -> Not best time Complexity.

    2. Maintain Set/Data Struncture. -> Not best time Complexity.

    ** Small to large trick
        For Union -> Always add small set to the large set. O((logn)^2)

        proof: 
            lets say we have a set A of size 1,now to merge it to a set B 
            size(B)>=1 then resultant set will be of size 1+size(B) which is atleast double of size(A)

            hence every time size will double and hence logN times.

            so total movements will be logN and each movement will take logN time. hence (logN)^2.
    
   ? 3. Union Find:
        Let A:{1,3,5} B:{2,6}
        representation of A and B will be:
        Leader : L
            L                L
        A: (1)<-3<-5     B: (2)<-6

        Union(5,6):
            L
            (1)<-3<-5
             ^
             |
             2<-6

        So, union is now O(1) -> max(O(1),T(Find(a),Find(b))) -> O(logn)
        But Find(a) -> still O(n), hence merging small to large will help in reducing the time complexity of find.

        Union
         1. Rank Compression.
            rank is the height of the tree. so, merge the smaller tree to the larger tree. 
             i.e. point the parent of smaller tree to the larger tree. so O(logN).
       **2. Size Compression (prefer)
            same as rank compression but instead of height we use size of the tree. 

        find
            1. Path Compression O(logN):Find
                while finding the parent of a node, make the parent of the node as the parent of the parent of the node.
                 O                         O
                / \                       /\ \
               o   o  => converted to     o o o
              / \                        /
             o   o<- find               o

         if we use either Path Compression or Size Compression then the time complexity of find will be O(logN) and union will be O(logN) as well.

         But if we use both Path Compression and Size Compression then the time complexity:
          Ackermann function O(logN*)
            log* = {1+log*logN} steps to reach 1. -> log*(64000) = 5,6 (approx) 

            ```
                    int find_set(int x)
                    {
                        if (x == parent[x])
                            return x;
                        return parent[x] = find_set(parent[x]);
                    }

                    void union_sets(int a, int b)
                    {
                        a = find_set(a);
                        b = find_set(b);
                        if (a == b) return;
                        if (rank[a] < rank[b])
                            swap(a, b);
                        size[b] += size[a];
                        size[a] = 0;
                        parent[b] = a;
                        if (rank[a] == rank[b])
                            rank[a]++;
                    }
            ```